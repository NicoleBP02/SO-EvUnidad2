RESPUESTAS EVALUACIÓN UNIDAD 2

Problema 1: análisis y relación


* Explica cómo funciona el programa.
R//: Se importan las librerías, luego se define la estructura IntArray con un puntero tipo int a la dirección del arreglo, y una longitud para el arreglo tipo int. Luego se declaran las funciones para crea, inicializar, destruir/liberar memoria e imprimir. Después está la función main en la cual se hace uso de cada una de las funciones. Las funciones están creadas de la siguiente manera: createIntArray(int size), lo que hace es reservar en memoria dinámica espacio para la estructura IntArray y para el puntero de la estructura, asignar el tamaño y retorna el puntero al espacio de memoria asignado; initIntArray(IntArray *this), teniendo al dirección de memoria de la estructura lo que hace es recorrerla y asignar valores del 0 al 99 (100 posiciones); printArray(IntArray *this), recorre la estructura ubicada en esa posición de memoria e imprime cada posición; destroyIntArray(IntArray *this),libera de la memoria el puntero del arreglo y la estructura.

* Explica en que parte del MAPA DE MEMORIA del proceso se almacena CADA variable usada.
R//: -> *parr : heap
     -> lenght : stack
     -> *pIntArray : heap
     -> i : stack
     -> *this: stack

* Construye una programa similar a este usando Java o C#.
* Explica en qué parte de la memoria se almacena cada variable de tu programa.
R//: 
     -> myarr : heap (porque la palabra reservada new reserva espacio en el heap y retorna la dirección en mem dinámica)
     -> that : heap (porque un puntero a la ubicación de un objeto)
     -> size: stack (variables locales)
     -> i : stack (variables locales)
     -> arr: heap (si es del objeto instanciado) -- stack (si se está declarando la estrucutra del objeto)
     -> lenght: heap  (si es del objeto intanciado) -- stack (si se está declarando la estrucutra del objeto)

* Compara ambos programas e indica qué conceptos del programa propuesto se ven reflejados en tu programa.
R//: Vemos el concepto del objeto reflejado en el struct en C, que se instancia. Vemos también que para llenar
las posiciones del arreglo se hace accediendo a una estructura u objeto que está ubicado en la memoria dinámica,
lo mismo se ve al imprimirla. Notamos que en C se tiene que liberar memoria manualmente, mientras que en Java
esto se hace automáticamente por medio del garbage collector. Pero se puede también forzar el garbage collector,
como en C, al dejar de referenciar el objeto/variable, así nos aseguramos de liberar el espacio. 
También se refleja el malloc de C en la palabra reservada new en Java que se encarga de reservar un espacio en
memoria dinámica y retornar la dirección de dicha posición, pero lo hace automáticamente y sin nuestra interferencia
(es invisible, pasa por detrás).
